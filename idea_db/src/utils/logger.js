const config = require('../config');

class Logger {
  constructor() {
    this.logLevel = config.debug.logLevel;
    this.debugEnabled = config.debug.enabled;
  }

  info(message, data = null) {
    this._log('INFO', message, data);
  }

  warn(message, data = null) {
    this._log('WARN', message, data);
  }

  error(message, data = null) {
    this._log('ERROR', message, data);
  }

  debug(message, data = null) {
    if (this.debugEnabled) {
      this._log('DEBUG', message, data);
    }
  }

  success(message, data = null) {
    this._log('SUCCESS', message, data);
  }

  _log(level, message, data) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] [${level}] ${message}`;
    
    console.log(logMessage);
    
    if (data) {
      console.log(JSON.stringify(data, null, 2));
    }
  }

  // „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Âà•„ÅÆ„É≠„Ç∞
  platformStart(platform) {
    this.info(`üöÄ ${platform} „Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞ÈñãÂßã`);
  }

  platformComplete(platform, count) {
    this.success(`‚úÖ ${platform} ÂÆå‰∫Ü: ${count}‰ª∂ÂèñÂæó`);
  }

  platformError(platform, error) {
    this.error(`‚ùå ${platform} „Ç®„É©„Éº:`, error.message);
  }

  // Áµ±Ë®à„É≠„Ç∞
  scrapingStats(stats) {
    this.info('üìä „Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞Áµ±Ë®à:');
    Object.entries(stats).forEach(([platform, data]) => {
      this.info(`  ${platform}: ${data.total}‰ª∂ (Êñ∞Ë¶è: ${data.new}‰ª∂)`);
    });
  }
}

module.exports = new Logger(); 